/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated.potentiometer
import org.sintef.smac._
import org.thingml.devices._
object TestIn{ def getName = "testIn" }
case class TestIn(c : Char, override val name : String = TestIn.getName) extends Event(name)
object NewValue{ def getName = "newValue" }
case class NewValue(value : Int, override val name : String = NewValue.getName) extends Event(name)
object Led_off{ def getName = "led_off" }
case class Led_off(override val name : String = Led_off.getName) extends Event(name)
object Led_toggle{ def getName = "led_toggle" }
case class Led_toggle(override val name : String = Led_toggle.getName) extends Event(name)
object Timer_timeout{ def getName = "timer_timeout" }
case class Timer_timeout(override val name : String = Timer_timeout.getName) extends Event(name)
object Poll{ def getName = "poll" }
case class Poll(override val name : String = Poll.getName) extends Event(name)
object Led_on{ def getName = "led_on" }
case class Led_on(override val name : String = Led_on.getName) extends Event(name)
object Timer_start{ def getName = "timer_start" }
case class Timer_start(delay : Int, override val name : String = Timer_start.getName) extends Event(name)
object Timer_cancel{ def getName = "timer_cancel" }
case class Timer_cancel(override val name : String = Timer_cancel.getName) extends Event(name)
object TestOut{ def getName = "testOut" }
case class TestOut(c : Char, override val name : String = TestOut.getName) extends Event(name)
object TestFailure{ def getName = "testFailure" }
case class TestFailure(override val name : String = TestFailure.getName) extends Event(name)

/**
 * Definitions for type : ThingMLScheduler
 **/
class ThingMLScheduler extends Component {

//Companion object
  object ThingMLScheduler{
    object PollingPort{
      def getName = "Polling"
      object in {
      }
      object out {
        val poll = Poll.getName
      }
    }

  }

  new Port("Polling", List(), List(ThingMLScheduler.PollingPort.out.poll), this).start
  this.behavior ++= List(new SchedulerStateMachine(false, this).getBehavior)
  case class SchedulerStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
//No entry action defined for this state
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val default_state = new State(DefaultState(), root)
    parent.addSubState(default_state)
    case class DefaultState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        class PollTask(p : Port) extends java.util.TimerTask{
          override def run {
            p.send(new Poll())
          }
        }
        new java.util.Timer().scheduleAtFixedRate(new PollTask(getPort("Polling").get), 5, 5)
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(default_state)

//create transitions among sub-states
  }
}

/**
 * Definitions for type : SoftTimer
 **/
class SoftTimer extends Component {

//Companion object
  object SoftTimer{
    object PollingPort{
      def getName = "Polling"
      object in {
        val poll = Poll.getName
      }
      object out {
      }
    }

    object timerPort{
      def getName = "timer"
      object in {
        val timer_start = Timer_start.getName
        val timer_cancel = Timer_cancel.getName
      }
      object out {
        val timer_timeout = Timer_timeout.getName
      }
    }

  }


// Variables for the properties of the instance
  var SoftTimer_SoftTimer_target_var : Long = _

  new Port("Polling", List(SoftTimer.PollingPort.in.poll), List(), this).start
  new Port("timer", List(SoftTimer.timerPort.in.timer_start, SoftTimer.timerPort.in.timer_cancel), List(SoftTimer.timerPort.out.timer_timeout), this).start
  this.behavior ++= List(new SoftTimerStateMachine(false, this).getBehavior)
  case class SoftTimerStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
//No entry action defined for this state
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val Idle_state = new State(IdleState(), root)
    parent.addSubState(Idle_state)
    case class IdleState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
//No entry action defined for this state
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val Counting_state = new State(CountingState(), root)
    parent.addSubState(Counting_state)
    val t_self_607175072 = new InternalTransition(Counting_state, new InternalTransition607175072(), List((SoftTimer.timerPort.getName, SoftTimer.timerPort.in.timer_start)))
    Counting_state.addInternalTransition(t_self_607175072)
    case class CountingState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
//No entry action defined for this state
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(Idle_state)

//create transitions among sub-states
    val t_Idle2Counting_1263063368 = new Transition(Idle_state, Counting_state, TransitionIdle2Counting_1263063368(), List((SoftTimer.timerPort.getName, SoftTimer.timerPort.in.timer_start)))
    parent.addTransition(t_Idle2Counting_1263063368)
    val t_Counting2Idle_7179113 = new Transition(Counting_state, Idle_state, TransitionCounting2Idle_7179113(), List((SoftTimer.PollingPort.getName, SoftTimer.PollingPort.in.poll)))
    parent.addTransition(t_Counting2Idle_7179113)
    val t_Counting2Idle_189247287 = new Transition(Counting_state, Idle_state, TransitionCounting2Idle_189247287(), List((SoftTimer.timerPort.getName, SoftTimer.timerPort.in.timer_cancel)))
    parent.addTransition(t_Counting2Idle_189247287)
    case class TransitionIdle2Counting_1263063368 extends TransitionAction {
      override def checkGuard() : Boolean = {
        getEvent(SoftTimer.timerPort.in.timer_start, SoftTimer.timerPort.getName).get.asInstanceOf[Timer_start].delay > 0
      }
      override def executeActions() = {
        println(this + ".executeActions")
        SoftTimer_SoftTimer_target_var = System.currentTimeMillis() + getEvent(SoftTimer.timerPort.in.timer_start, SoftTimer.timerPort.getName).get.asInstanceOf[Timer_start].delay
      }

    }
    case class InternalTransition607175072 extends InternalTransitionAction {
      override def checkGuard() : Boolean = {
        getEvent(SoftTimer.timerPort.in.timer_start, SoftTimer.timerPort.getName).get.asInstanceOf[Timer_start].delay > 0
      }
      override def executeActions() = {
        println(this + ".executeActions")
        SoftTimer_SoftTimer_target_var = System.currentTimeMillis() + getEvent(SoftTimer.timerPort.in.timer_start, SoftTimer.timerPort.getName).get.asInstanceOf[Timer_start].delay
      }

    }
    case class TransitionCounting2Idle_7179113 extends TransitionAction {
      override def checkGuard() : Boolean = {
        !(System.currentTimeMillis() < SoftTimer_SoftTimer_target_var)
      }
      override def executeActions() = {
        println(this + ".executeActions")
//No action defined for this transition
      }

      override def executeAfterActions() = {
        println(this + ".executeAfterActions")
        handler.getPort("timer") match{
          case Some(p) => p.send(new Timer_timeout())
          case None => println("Warning: no port timer You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionCounting2Idle_189247287 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
//No action defined for this transition
      }

    }
  }
}

/**
 * Definitions for type : Potentiometer
 **/
class Potentiometer extends Component with org.thingml.devices.Observer{

//Companion object
  object Potentiometer{
    object PotentiometerPort{
      def getName = "Potentiometer"
      object in {
      }
      object out {
        val newValue = NewValue.getName
      }
    }

  }


// Variables for the properties of the instance
  var Potentiometer_device_var : org.thingml.devices.PotentiometerDemo = _

  new Port("Potentiometer", List(), List(Potentiometer.PotentiometerPort.out.newValue), this).start
  override def newValue(Potentiometer_newValue_v_var : Int) : Unit = {
    val handler = this
    handler.getPort("Potentiometer") match{
      case Some(p) => p.send(new NewValue(Potentiometer_newValue_v_var))
      case None => println("Warning: no port Potentiometer You may consider revising your ThingML model.")
    }
  }
  this.behavior ++= List(new BehaviorStateMachine(false, this).getBehavior)
  case class BehaviorStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
      Potentiometer_device_var = new org.thingml.devices.PotentiometerDemo(0, 1023)
      Potentiometer_device_var.register(root.asInstanceOf[org.thingml.devices.Observer])
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val Ready_state = new State(ReadyState(), root)
    parent.addSubState(Ready_state)
    case class ReadyState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
//No entry action defined for this state
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(Ready_state)

//create transitions among sub-states
  }
}

/**
 * Definitions for type : ChangingFrequencyLed
 **/
class ChangingFrequencyLed extends Component {

//Companion object
  object ChangingFrequencyLed{
    object LedPort{
      def getName = "Led"
      object in {
      }
      object out {
        val led_toggle = Led_toggle.getName
      }
    }

    object PotentiometerPort{
      def getName = "Potentiometer"
      object in {
        val newValue = NewValue.getName
      }
      object out {
      }
    }

    object TimerPort{
      def getName = "Timer"
      object in {
        val timer_timeout = Timer_timeout.getName
      }
      object out {
        val timer_start = Timer_start.getName
      }
    }

  }


// Variables for the properties of the instance
  var ChangingFrequencyLed_frequency_var : Int = _

  new Port("Led", List(), List(ChangingFrequencyLed.LedPort.out.led_toggle), this).start
  new Port("Potentiometer", List(ChangingFrequencyLed.PotentiometerPort.in.newValue), List(), this).start
  new Port("Timer", List(ChangingFrequencyLed.TimerPort.in.timer_timeout), List(ChangingFrequencyLed.TimerPort.out.timer_start), this).start
  this.behavior ++= List(new BehaviorStateMachine(false, this).getBehavior)
  case class BehaviorStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
//No entry action defined for this state
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val Running_state = new State(RunningState(), root)
    parent.addSubState(Running_state)
    case class RunningState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        handler.getPort("Timer") match{
          case Some(p) => p.send(new Timer_start(ChangingFrequencyLed_frequency_var))
          case None => println("Warning: no port Timer You may consider revising your ThingML model.")
        }
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(Running_state)

//create transitions among sub-states
    val t_Running2Running_431897218 = new Transition(Running_state, Running_state, TransitionRunning2Running_431897218(), List((ChangingFrequencyLed.TimerPort.getName, ChangingFrequencyLed.TimerPort.in.timer_timeout)))
    parent.addTransition(t_Running2Running_431897218)
    val t_Running2Running_1318092450 = new Transition(Running_state, Running_state, TransitionRunning2Running_1318092450(), List((ChangingFrequencyLed.PotentiometerPort.getName, ChangingFrequencyLed.PotentiometerPort.in.newValue)))
    parent.addTransition(t_Running2Running_1318092450)
    case class TransitionRunning2Running_431897218 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
        handler.getPort("Led") match{
          case Some(p) => p.send(new Led_toggle())
          case None => println("Warning: no port Led You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionRunning2Running_1318092450 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
        ChangingFrequencyLed_frequency_var = getEvent(ChangingFrequencyLed.PotentiometerPort.in.newValue, ChangingFrequencyLed.PotentiometerPort.getName).get.asInstanceOf[NewValue].value
      }

    }
  }
}

/**
 * Definitions for type : Led
 **/
class Led extends Component {

//Companion object
  object Led{
    object LedPort{
      def getName = "Led"
      object in {
        val led_on = Led_on.getName
        val led_off = Led_off.getName
        val led_toggle = Led_toggle.getName
      }
      object out {
      }
    }

  }


// Variables for the properties of the instance
  var Led_device_var : org.thingml.devices.LedDemo = _

  new Port("Led", List(Led.LedPort.in.led_on, Led.LedPort.in.led_off, Led.LedPort.in.led_toggle), List(), this).start
  this.behavior ++= List(new LedImplStateMachine(false, this).getBehavior)
  case class LedImplStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
      Led_device_var = new org.thingml.devices.LedDemo()
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val LedOff_state = new State(LedOffState(), root)
    parent.addSubState(LedOff_state)
    case class LedOffState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        Led_device_var.off()
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val LedOn_state = new State(LedOnState(), root)
    parent.addSubState(LedOn_state)
    case class LedOnState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        Led_device_var.on()
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(LedOff_state)

//create transitions among sub-states
    val t_LedOff2LedOn_373265850 = new Transition(LedOff_state, LedOn_state, TransitionLedOff2LedOn_373265850(), List((Led.LedPort.getName, Led.LedPort.in.led_on), (Led.LedPort.getName, Led.LedPort.in.led_toggle)))
    parent.addTransition(t_LedOff2LedOn_373265850)
    val t_LedOn2LedOff_627740764 = new Transition(LedOn_state, LedOff_state, TransitionLedOn2LedOff_627740764(), List((Led.LedPort.getName, Led.LedPort.in.led_off), (Led.LedPort.getName, Led.LedPort.in.led_toggle)))
    parent.addTransition(t_LedOn2LedOff_627740764)
    case class TransitionLedOff2LedOn_373265850 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
//No action defined for this transition
      }

    }
    case class TransitionLedOn2LedOff_627740764 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
//No action defined for this transition
      }

    }
  }
}