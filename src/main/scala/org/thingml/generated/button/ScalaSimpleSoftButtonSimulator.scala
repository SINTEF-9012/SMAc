/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated.button
import org.sintef.smac._
import org.thingml.devices._
object Click{ def getName = "click" }
case class Click(override val name : String = Click.getName) extends Event(name)
object Long_press{ def getName = "long_press" }
case class Long_press(override val name : String = Long_press.getName) extends Event(name)
object Led_toggle{ def getName = "led_toggle" }
case class Led_toggle(override val name : String = Led_toggle.getName) extends Event(name)
object Double_click{ def getName = "double_click" }
case class Double_click(override val name : String = Double_click.getName) extends Event(name)
object Released{ def getName = "released" }
case class Released(override val name : String = Released.getName) extends Event(name)
object Led_off{ def getName = "led_off" }
case class Led_off(override val name : String = Led_off.getName) extends Event(name)
object Pressed{ def getName = "pressed" }
case class Pressed(override val name : String = Pressed.getName) extends Event(name)
object Timer_start{ def getName = "timer_start" }
case class Timer_start(delay : Int, override val name : String = Timer_start.getName) extends Event(name)
object TestOut{ def getName = "testOut" }
case class TestOut(c : Char, override val name : String = TestOut.getName) extends Event(name)
object Update{ def getName = "update" }
case class Update(override val name : String = Update.getName) extends Event(name)
object TestFailure{ def getName = "testFailure" }
case class TestFailure(override val name : String = TestFailure.getName) extends Event(name)
object Timer_timeout{ def getName = "timer_timeout" }
case class Timer_timeout(override val name : String = Timer_timeout.getName) extends Event(name)
object Led_on{ def getName = "led_on" }
case class Led_on(override val name : String = Led_on.getName) extends Event(name)
object TestIn{ def getName = "testIn" }
case class TestIn(c : Char, override val name : String = TestIn.getName) extends Event(name)
object Timer_cancel{ def getName = "timer_cancel" }
case class Timer_cancel(override val name : String = Timer_cancel.getName) extends Event(name)
object Poll{ def getName = "poll" }
case class Poll(override val name : String = Poll.getName) extends Event(name)

/**
 * Definitions for type : SoftTimer
 **/
class SoftTimer(var SoftTimer_javaTimer_var : java.util.Timer, var SoftTimer_lastTask_var : java.util.TimerTask) extends Component with org.thingml.utils.TimerTaskTrait{

//Companion object
  object SoftTimer{
    object PollingPort{
      def getName = "Polling"
      object in {
        val poll = Poll.getName
      }
      object out {
      }
    }

    object timerPort{
      def getName = "timer"
      object in {
        val timer_start = Timer_start.getName
        val timer_cancel = Timer_cancel.getName
      }
      object out {
        val timer_timeout = Timer_timeout.getName
      }
    }

  }

  new Port(SoftTimer.PollingPort.getName, List(SoftTimer.PollingPort.in.poll), List(), this).start
  new Port(SoftTimer.timerPort.getName, List(SoftTimer.timerPort.in.timer_start, SoftTimer.timerPort.in.timer_cancel), List(SoftTimer.timerPort.out.timer_timeout), this).start
  override def run() : Unit = {
    val handler = this
    handler.getPort("timer") match{
      case Some(p) => p.send(new Timer_timeout())
      case None => println("Warning: no port timer You may consider revising your ThingML model.")
    }
  }
  def cancel() : Unit = {
    val handler = this
    try {
      if( !(SoftTimer_lastTask_var == null)) {
        SoftTimer_lastTask_var.cancel
        SoftTimer_javaTimer_var.purge

      }
    } catch {
      case _ =>
        SoftTimer_javaTimer_var = new java.util.Timer()
    }
  }
  def start(SoftTimer_start_delay_var : Int) : Unit = {
    val handler = this
    cancel()
    SoftTimer_lastTask_var = this.newTimerTask
    try {
      SoftTimer_javaTimer_var.schedule(SoftTimer_lastTask_var, SoftTimer_start_delay_var)
    } catch {
      case _ =>
    }
  }
  this.behavior ++= List(new SoftTimerStateMachine(false, this).getBehavior)
  case class SoftTimerStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
//No entry action defined for this state
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

    val t_self_269660331 = new InternalTransition(getBehavior, new InternalTransition269660331(), List((SoftTimer.timerPort.getName, SoftTimer.timerPort.in.timer_start)))
    val t_self_433593843 = new InternalTransition(getBehavior, new InternalTransition433593843(), List((SoftTimer.timerPort.getName, SoftTimer.timerPort.in.timer_cancel)))
    case class InternalTransition269660331 extends InternalTransitionAction {
      override def checkGuard() : Boolean = {
        try {
          getEvent(SoftTimer.timerPort.in.timer_start, SoftTimer.timerPort.getName).get.asInstanceOf[Timer_start].delay > 0}
        catch {
          case nse : java.util.NoSuchElementException => return false
          case e : Exception => return false
        }

      }
      override def executeActions() = {
        println(this + ".executeActions")
        start(getEvent(SoftTimer.timerPort.in.timer_start, SoftTimer.timerPort.getName).get.asInstanceOf[Timer_start].delay)
      }

    }
    case class InternalTransition433593843 extends InternalTransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
        cancel()
      }

    }
//create sub-states
    val default_state = new State(DefaultState(), root)
    parent.addSubState(default_state)
    case class DefaultState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
//No entry action defined for this state
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(default_state)

//create transitions among sub-states
  }
}

/**
 * Definitions for type : SimpleSoftButton
 **/
class SimpleSoftButton() extends Component {

//Companion object
  object SimpleSoftButton{
    object SoftButtonPort{
      def getName = "SoftButton"
      object in {
        val click = Click.getName
        val double_click = Double_click.getName
        val long_press = Long_press.getName
      }
      object out {
      }
    }

    object TimerPort{
      def getName = "Timer"
      object in {
        val timer_timeout = Timer_timeout.getName
      }
      object out {
        val timer_start = Timer_start.getName
        val timer_cancel = Timer_cancel.getName
      }
    }

    object LedPort{
      def getName = "Led"
      object in {
      }
      object out {
        val led_toggle = Led_toggle.getName
        val led_off = Led_off.getName
      }
    }

  }

  new Port(SimpleSoftButton.SoftButtonPort.getName, List(SimpleSoftButton.SoftButtonPort.in.click, SimpleSoftButton.SoftButtonPort.in.double_click, SimpleSoftButton.SoftButtonPort.in.long_press), List(), this).start
  new Port(SimpleSoftButton.TimerPort.getName, List(SimpleSoftButton.TimerPort.in.timer_timeout), List(SimpleSoftButton.TimerPort.out.timer_start, SimpleSoftButton.TimerPort.out.timer_cancel), this).start
  new Port(SimpleSoftButton.LedPort.getName, List(), List(SimpleSoftButton.LedPort.out.led_toggle, SimpleSoftButton.LedPort.out.led_off), this).start
  this.behavior ++= List(new SimpleSoftButtonImplStateMachine(false, this).getBehavior)
  case class SimpleSoftButtonImplStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
//No entry action defined for this state
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val Running_state = new RunningState(false, root).getBehavior
    parent.addSubState(Running_state)
    case class RunningState(keepHistory : Boolean, root : Component) extends StateAction {
      def getBehavior = parent
      val parent : CompositeState = new CompositeState(this, keepHistory, root)
      override def onEntry() = {
        println(this + ".onEntry")
//No entry action defined for this state
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

//create sub-states
      val Wait_state = new State(WaitState(), root)
      parent.addSubState(Wait_state)
      case class WaitState extends StateAction {
        override def onEntry() = {
          println(this + ".onEntry")
          handler.getPort("Led") match{
            case Some(p) => p.send(new Led_off())
            case None => println("Warning: no port Led You may consider revising your ThingML model.")
          }
        }

        override def onExit() = {
          println(this + ".onExit")
//No exit action defined for this state
        }

        val t_self_1389035524 = new InternalTransition(getBehavior, new InternalTransition1389035524(), List((SimpleSoftButton.SoftButtonPort.getName, SimpleSoftButton.SoftButtonPort.in.click)))
        case class InternalTransition1389035524 extends InternalTransitionAction {
          override def executeActions() = {
            println(this + ".executeActions")
            handler.getPort("Led") match{
              case Some(p) => p.send(new Led_toggle())
              case None => println("Warning: no port Led You may consider revising your ThingML model.")
            }
          }

        }
      }

      val BlinkFast_state = new State(BlinkFastState(), root)
      parent.addSubState(BlinkFast_state)
      case class BlinkFastState extends StateAction {
        override def onEntry() = {
          println(this + ".onEntry")
          handler.getPort("Timer") match{
            case Some(p) => p.send(new Timer_start(150))
            case None => println("Warning: no port Timer You may consider revising your ThingML model.")
          }
        }

        override def onExit() = {
          println(this + ".onExit")
//No exit action defined for this state
        }

      }

      parent.setInitial(Wait_state)

//create transitions among sub-states
      val t_Wait2BlinkFast_289626035 = new Transition(Wait_state, BlinkFast_state, TransitionWait2BlinkFast_289626035(), List((SimpleSoftButton.SoftButtonPort.getName, SimpleSoftButton.SoftButtonPort.in.double_click)))
      parent.addTransition(t_Wait2BlinkFast_289626035)
      val t_BlinkFast2BlinkFast_895344114 = new Transition(BlinkFast_state, BlinkFast_state, TransitionBlinkFast2BlinkFast_895344114(), List((SimpleSoftButton.TimerPort.getName, SimpleSoftButton.TimerPort.in.timer_timeout)))
      parent.addTransition(t_BlinkFast2BlinkFast_895344114)
      val t_BlinkFast2Wait_967067476 = new Transition(BlinkFast_state, Wait_state, TransitionBlinkFast2Wait_967067476(), List((SimpleSoftButton.SoftButtonPort.getName, SimpleSoftButton.SoftButtonPort.in.click)))
      parent.addTransition(t_BlinkFast2Wait_967067476)
      case class TransitionWait2BlinkFast_289626035 extends TransitionAction {
        override def executeActions() = {
          println(this + ".executeActions")
          handler.getPort("Led") match{
            case Some(p) => p.send(new Led_toggle())
            case None => println("Warning: no port Led You may consider revising your ThingML model.")
          }
        }

      }
      case class TransitionBlinkFast2BlinkFast_895344114 extends TransitionAction {
        override def executeActions() = {
          println(this + ".executeActions")
          handler.getPort("Led") match{
            case Some(p) => p.send(new Led_toggle())
            case None => println("Warning: no port Led You may consider revising your ThingML model.")
          }
        }

      }
      case class TransitionBlinkFast2Wait_967067476 extends TransitionAction {
        override def executeActions() = {
          println(this + ".executeActions")
//No action defined for this transition
        }

      }
    }

    val BlinkSlow_state = new State(BlinkSlowState(), root)
    parent.addSubState(BlinkSlow_state)
    case class BlinkSlowState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        handler.getPort("Timer") match{
          case Some(p) => p.send(new Timer_start(1000))
          case None => println("Warning: no port Timer You may consider revising your ThingML model.")
        }
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(Running_state)

//create transitions among sub-states
    val t_Running2BlinkSlow_1512741157 = new Transition(Running_state, BlinkSlow_state, TransitionRunning2BlinkSlow_1512741157(), List((SimpleSoftButton.SoftButtonPort.getName, SimpleSoftButton.SoftButtonPort.in.long_press)))
    parent.addTransition(t_Running2BlinkSlow_1512741157)
    val t_BlinkSlow2BlinkSlow_1530354431 = new Transition(BlinkSlow_state, BlinkSlow_state, TransitionBlinkSlow2BlinkSlow_1530354431(), List((SimpleSoftButton.TimerPort.getName, SimpleSoftButton.TimerPort.in.timer_timeout)))
    parent.addTransition(t_BlinkSlow2BlinkSlow_1530354431)
    val t_BlinkSlow2Running_1093052749 = new Transition(BlinkSlow_state, Running_state, TransitionBlinkSlow2Running_1093052749(), List((SimpleSoftButton.SoftButtonPort.getName, SimpleSoftButton.SoftButtonPort.in.click)))
    parent.addTransition(t_BlinkSlow2Running_1093052749)
    case class TransitionRunning2BlinkSlow_1512741157 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
        handler.getPort("Led") match{
          case Some(p) => p.send(new Led_toggle())
          case None => println("Warning: no port Led You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionBlinkSlow2BlinkSlow_1530354431 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
        handler.getPort("Led") match{
          case Some(p) => p.send(new Led_toggle())
          case None => println("Warning: no port Led You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionBlinkSlow2Running_1093052749 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
//No action defined for this transition
      }

    }
  }
}

/**
 * Definitions for type : Button
 **/
class Button(var BrickSensor_lastValue_var : Int, val Brick_device_var : org.thingml.devices.Device) extends Component with org.thingml.devices.Observer{

//Companion object
  object Button{
    object ButtonPort{
      def getName = "Button"
      object in {
      }
      object out {
        val pressed = Pressed.getName
        val released = Released.getName
      }
    }

    object SensorMockUpPort{
      def getName = "SensorMockUp"
      object in {
      }
      object out {
        val update = Update.getName
      }
    }

    object SensorPort{
      def getName = "Sensor"
      object in {
        val update = Update.getName
      }
      object out {
      }
    }

  }

  new Port(Button.ButtonPort.getName, List(), List(Button.ButtonPort.out.pressed, Button.ButtonPort.out.released), this).start
  new Port(Button.SensorMockUpPort.getName, List(), List(Button.SensorMockUpPort.out.update), this).start
  new Port(Button.SensorPort.getName, List(Button.SensorPort.in.update), List(), this).start
  override def newValue(BrickSensor_newValue_v_var : Int) : Unit = {
    val handler = this
    BrickSensor_lastValue_var = BrickSensor_newValue_v_var
    handler.getPort("SensorMockUp") match{
      case Some(p) => p.send(new Update())
      case None => println("Warning: no port SensorMockUp You may consider revising your ThingML model.")
    }
  }
  def register() : Unit = {
    val handler = this
    Brick_device_var.asInstanceOf[org.thingml.devices.Observable].register(this)
  }
  this.behavior ++= List(new BehaviorStateMachine(false, this).getBehavior)
  case class BehaviorStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
      register()
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

    val t_self_380557334 = new InternalTransition(getBehavior, new InternalTransition380557334(), List((Button.SensorPort.getName, Button.SensorPort.in.update)))
    case class InternalTransition380557334 extends InternalTransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
        if(BrickSensor_lastValue_var == 0) {
          handler.getPort("Button") match{
            case Some(p) => p.send(new Pressed())
            case None => println("Warning: no port Button You may consider revising your ThingML model.")
          }

        }
        if(BrickSensor_lastValue_var == 1) {
          handler.getPort("Button") match{
            case Some(p) => p.send(new Released())
            case None => println("Warning: no port Button You may consider revising your ThingML model.")
          }

        }
      }

    }
//create sub-states
    val Ready_state = new State(ReadyState(), root)
    parent.addSubState(Ready_state)
    case class ReadyState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
//No entry action defined for this state
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(Ready_state)

//create transitions among sub-states
  }
}

/**
 * Definitions for type : SoftButton
 **/
class SoftButton(val SoftButton_long_delay_var : Int, val SoftButton_double_delay_var : Int) extends Component {

//Companion object
  object SoftButton{
    object ButtonPort{
      def getName = "Button"
      object in {
        val pressed = Pressed.getName
        val released = Released.getName
      }
      object out {
      }
    }

    object TimerPort{
      def getName = "Timer"
      object in {
        val timer_timeout = Timer_timeout.getName
      }
      object out {
        val timer_start = Timer_start.getName
        val timer_cancel = Timer_cancel.getName
      }
    }

    object SoftButtonPort{
      def getName = "SoftButton"
      object in {
      }
      object out {
        val click = Click.getName
        val double_click = Double_click.getName
        val long_press = Long_press.getName
      }
    }

  }

  new Port(SoftButton.ButtonPort.getName, List(SoftButton.ButtonPort.in.pressed, SoftButton.ButtonPort.in.released), List(), this).start
  new Port(SoftButton.TimerPort.getName, List(SoftButton.TimerPort.in.timer_timeout), List(SoftButton.TimerPort.out.timer_start, SoftButton.TimerPort.out.timer_cancel), this).start
  new Port(SoftButton.SoftButtonPort.getName, List(), List(SoftButton.SoftButtonPort.out.click, SoftButton.SoftButtonPort.out.double_click, SoftButton.SoftButtonPort.out.long_press), this).start
  this.behavior ++= List(new SoftButtonImplStateMachine(false, this).getBehavior)
  case class SoftButtonImplStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
//No entry action defined for this state
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val Idle_state = new State(IdleState(), root)
    parent.addSubState(Idle_state)
    case class IdleState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
//No entry action defined for this state
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val Pressed_state = new State(PressedState(), root)
    parent.addSubState(Pressed_state)
    case class PressedState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        handler.getPort("Timer") match{
          case Some(p) => p.send(new Timer_start(SoftButton_long_delay_var))
          case None => println("Warning: no port Timer You may consider revising your ThingML model.")
        }
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val Released_state = new State(ReleasedState(), root)
    parent.addSubState(Released_state)
    case class ReleasedState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        handler.getPort("Timer") match{
          case Some(p) => p.send(new Timer_start(SoftButton_double_delay_var))
          case None => println("Warning: no port Timer You may consider revising your ThingML model.")
        }
      }

      override def onExit() = {
        println(this + ".onExit")
        handler.getPort("Timer") match{
          case Some(p) => p.send(new Timer_cancel())
          case None => println("Warning: no port Timer You may consider revising your ThingML model.")
        }
      }

    }

    parent.setInitial(Idle_state)

//create transitions among sub-states
    val t_Idle2Pressed_584135689 = new Transition(Idle_state, Pressed_state, TransitionIdle2Pressed_584135689(), List((SoftButton.ButtonPort.getName, SoftButton.ButtonPort.in.pressed)))
    parent.addTransition(t_Idle2Pressed_584135689)
    val t_Pressed2Idle_574388410 = new Transition(Pressed_state, Idle_state, TransitionPressed2Idle_574388410(), List((SoftButton.TimerPort.getName, SoftButton.TimerPort.in.timer_timeout)))
    parent.addTransition(t_Pressed2Idle_574388410)
    val t_Pressed2Released_702428805 = new Transition(Pressed_state, Released_state, TransitionPressed2Released_702428805(), List((SoftButton.ButtonPort.getName, SoftButton.ButtonPort.in.released)))
    parent.addTransition(t_Pressed2Released_702428805)
    val t_Released2Idle_1790707862 = new Transition(Released_state, Idle_state, TransitionReleased2Idle_1790707862(), List((SoftButton.TimerPort.getName, SoftButton.TimerPort.in.timer_timeout)))
    parent.addTransition(t_Released2Idle_1790707862)
    val t_Released2Idle_1568742741 = new Transition(Released_state, Idle_state, TransitionReleased2Idle_1568742741(), List((SoftButton.ButtonPort.getName, SoftButton.ButtonPort.in.pressed)))
    parent.addTransition(t_Released2Idle_1568742741)
    case class TransitionIdle2Pressed_584135689 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
//No action defined for this transition
      }

    }
    case class TransitionPressed2Idle_574388410 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
//No action defined for this transition
      }

      override def executeAfterActions() = {
        println(this + ".executeAfterActions")
        handler.getPort("SoftButton") match{
          case Some(p) => p.send(new Long_press())
          case None => println("Warning: no port SoftButton You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionPressed2Released_702428805 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
        handler.getPort("Timer") match{
          case Some(p) => p.send(new Timer_cancel())
          case None => println("Warning: no port Timer You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionReleased2Idle_1790707862 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
        handler.getPort("SoftButton") match{
          case Some(p) => p.send(new Click())
          case None => println("Warning: no port SoftButton You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionReleased2Idle_1568742741 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
        handler.getPort("SoftButton") match{
          case Some(p) => p.send(new Double_click())
          case None => println("Warning: no port SoftButton You may consider revising your ThingML model.")
        }
      }

    }
  }
}

/**
 * Definitions for type : Led
 **/
class Led(val Brick_device_var : org.thingml.devices.Device) extends Component {

//Companion object
  object Led{
    object LedPort{
      def getName = "Led"
      object in {
        val led_on = Led_on.getName
        val led_off = Led_off.getName
        val led_toggle = Led_toggle.getName
      }
      object out {
      }
    }

  }

  new Port(Led.LedPort.getName, List(Led.LedPort.in.led_on, Led.LedPort.in.led_off, Led.LedPort.in.led_toggle), List(), this).start
  this.behavior ++= List(new LedImplStateMachine(false, this).getBehavior)
  case class LedImplStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
//No entry action defined for this state
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val LedOff_state = new State(LedOffState(), root)
    parent.addSubState(LedOff_state)
    case class LedOffState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        Brick_device_var.asInstanceOf[org.thingml.devices.LedDemo].off()
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val LedOn_state = new State(LedOnState(), root)
    parent.addSubState(LedOn_state)
    case class LedOnState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        Brick_device_var.asInstanceOf[org.thingml.devices.LedDemo].on()
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(LedOff_state)

//create transitions among sub-states
    val t_LedOff2LedOn_1964604112 = new Transition(LedOff_state, LedOn_state, TransitionLedOff2LedOn_1964604112(), List((Led.LedPort.getName, Led.LedPort.in.led_on), (Led.LedPort.getName, Led.LedPort.in.led_toggle)))
    parent.addTransition(t_LedOff2LedOn_1964604112)
    val t_LedOn2LedOff_1936722159 = new Transition(LedOn_state, LedOff_state, TransitionLedOn2LedOff_1936722159(), List((Led.LedPort.getName, Led.LedPort.in.led_off), (Led.LedPort.getName, Led.LedPort.in.led_toggle)))
    parent.addTransition(t_LedOn2LedOff_1936722159)
    case class TransitionLedOff2LedOn_1964604112 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
//No action defined for this transition
      }

    }
    case class TransitionLedOn2LedOff_1936722159 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
//No action defined for this transition
      }

    }
  }
}