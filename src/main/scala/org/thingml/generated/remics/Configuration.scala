/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated.remics
import org.sintef.smac._

object Access{ def getName = "access" }
case class Access(result : Boolean, override val name : String = Access.getName) extends Event(name)
object Ack{ def getName = "ack" }
case class Ack(access : Boolean, override val name : String = Ack.getName) extends Event(name)
object Login{ def getName = "login" }
case class Login(login : String, override val name : String = Login.getName) extends Event(name)
object Password{ def getName = "password" }
case class Password(pwd : String, override val name : String = Password.getName) extends Event(name)
object Log{ def getName = "log" }
case class Log(login : String, password : String, override val name : String = Log.getName) extends Event(name)

/**
 * Definitions for type : Client
 **/
class Client extends Component {


// Variables for the properties of the instance
  var Client_login_var : String = _
  var Client_pwd_var : String = _

  new Port("LoginServer", List(Ack.getName), List(Log.getName), this).start
  this.behavior ++= List(new AuthenticationStateMachine(false, this).getBehavior)
  case class AuthenticationStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
//No entry action defined for this state
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val Waiting_state = new State(WaitingState(), root)
    parent.addSubState(Waiting_state)
    case class WaitingState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        handler.root.getPort("LoginServer") match{
          case Some(p) => p.send(new Log(Client_login_var, Client_pwd_var))
          case None => println("Warning: no port LoginServer You may consider revising your ThingML model.")
        }
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val LoggedOn_state = new State(LoggedOnState(), root)
    parent.addSubState(LoggedOn_state)
    case class LoggedOnState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        println( "Your are logged in")
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(Waiting_state)

//create transitions among sub-states
    val t_Waiting2LoggedOn_1983671176 = new Transition(Waiting_state, LoggedOn_state, TransitionWaiting2LoggedOn_1983671176(), root)
    t_Waiting2LoggedOn_1983671176.initEvent(Ack.getName)
    parent.addTransition(t_Waiting2LoggedOn_1983671176)
    case class TransitionWaiting2LoggedOn_1983671176 extends TransitionAction {
      override def checkGuard() : Boolean = {
        getEvent(Ack.getName).get.asInstanceOf[Ack].access == true
      }
      override def executeActions() = {
        println(this + ".executeActions")
//No action defined for this transition
      }

    }
  }
}

/**
 * Definitions for type : Server
 **/
class Server extends Component {


// Variables for the properties of the instance
  var Server_username_var : String = _
  var Server_password_var : String = _

  new Port("LoginClient", List(Login.getName, Password.getName), List(Access.getName), this).start
  this.behavior ++= List(new AuthenticationStateMachine(false, this).getBehavior)
  case class AuthenticationStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
//No entry action defined for this state
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val WaitingForLogin_state = new State(WaitingForLoginState(), root)
    parent.addSubState(WaitingForLogin_state)
    case class WaitingForLoginState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        println( "Ready: Waiting for credential ...")
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val WaitingForPassword_state = new State(WaitingForPasswordState(), root)
    parent.addSubState(WaitingForPassword_state)
    case class WaitingForPasswordState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
//No entry action defined for this state
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val LoggedOn_state = new State(LoggedOnState(), root)
    parent.addSubState(LoggedOn_state)
    case class LoggedOnState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        println( "You are now logged in")
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(WaitingForLogin_state)

//create transitions among sub-states
    val t_WaitingForLogin2WaitingForPassword_1948548290 = new Transition(WaitingForLogin_state, WaitingForPassword_state, TransitionWaitingForLogin2WaitingForPassword_1948548290(), root)
    t_WaitingForLogin2WaitingForPassword_1948548290.initEvent(Login.getName)
    parent.addTransition(t_WaitingForLogin2WaitingForPassword_1948548290)
    val t_WaitingForPassword2LoggedOn_2009830835 = new Transition(WaitingForPassword_state, LoggedOn_state, TransitionWaitingForPassword2LoggedOn_2009830835(), root)
    t_WaitingForPassword2LoggedOn_2009830835.initEvent(Password.getName)
    parent.addTransition(t_WaitingForPassword2LoggedOn_2009830835)
    val t_WaitingForPassword2WaitingForLogin_1292792371 = new Transition(WaitingForPassword_state, WaitingForLogin_state, TransitionWaitingForPassword2WaitingForLogin_1292792371(), root)
    t_WaitingForPassword2WaitingForLogin_1292792371.initEvent(Password.getName)
    parent.addTransition(t_WaitingForPassword2WaitingForLogin_1292792371)
    case class TransitionWaitingForLogin2WaitingForPassword_1948548290 extends TransitionAction {
      override def checkGuard() : Boolean = {
        getEvent(Login.getName).get.asInstanceOf[Login].login == Server_username_var
      }
      override def executeActions() = {
        println(this + ".executeActions")
        handler.root.getPort("LoginClient") match{
          case Some(p) => p.send(new Access(true))
          case None => println("Warning: no port LoginClient You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionWaitingForPassword2LoggedOn_2009830835 extends TransitionAction {
      override def checkGuard() : Boolean = {
        getEvent(Password.getName).get.asInstanceOf[Password].pwd == Server_password_var
      }
      override def executeActions() = {
        println(this + ".executeActions")
        handler.root.getPort("LoginClient") match{
          case Some(p) => p.send(new Access(true))
          case None => println("Warning: no port LoginClient You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionWaitingForPassword2WaitingForLogin_1292792371 extends TransitionAction {
      override def checkGuard() : Boolean = {
        !(getEvent(Password.getName).get.asInstanceOf[Password].pwd == Server_password_var)
      }
      override def executeActions() = {
        println(this + ".executeActions")
        handler.root.getPort("LoginClient") match{
          case Some(p) => p.send(new Access(false))
          case None => println("Warning: no port LoginClient You may consider revising your ThingML model.")
        }
      }

    }
  }
}

/**
 * Definitions for type : Mediator
 **/
class Mediator extends Component {


// Variables for the properties of the instance
  var Mediator_password_var : String = _

  new Port("Client", List(Log.getName), List(Ack.getName), this).start
  new Port("Server", List(Access.getName), List(Login.getName, Password.getName), this).start
  this.behavior ++= List(new AuthenticationStateMachine(false, this).getBehavior)
  case class AuthenticationStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
    def getBehavior = parent
    val parent : StateMachine = new StateMachine(this, keepHistory, root)
    override def onEntry() = {
      println(this + ".onEntry")
//No entry action defined for this state
    }

    override def onExit() = {
      println(this + ".onExit")
//No exit action defined for this state
    }

//create sub-states
    val Ready_state = new State(ReadyState(), root)
    parent.addSubState(Ready_state)
    case class ReadyState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        println( "Ready: Waiting for credential ...")
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val CheckLogin_state = new State(CheckLoginState(), root)
    parent.addSubState(CheckLogin_state)
    case class CheckLoginState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
//No entry action defined for this state
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val CheckPassword_state = new State(CheckPasswordState(), root)
    parent.addSubState(CheckPassword_state)
    case class CheckPasswordState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        println( "Login accepted")
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    val LoggedOn_state = new State(LoggedOnState(), root)
    parent.addSubState(LoggedOn_state)
    case class LoggedOnState extends StateAction {
      override def onEntry() = {
        println(this + ".onEntry")
        println( "Password accepted")
        println( "You are now logged in")
      }

      override def onExit() = {
        println(this + ".onExit")
//No exit action defined for this state
      }

    }

    parent.setInitial(Ready_state)

//create transitions among sub-states
    val t_Ready2CheckPassword_1889690369 = new Transition(Ready_state, CheckPassword_state, TransitionReady2CheckPassword_1889690369(), root)
    t_Ready2CheckPassword_1889690369.initEvent(Log.getName)
    parent.addTransition(t_Ready2CheckPassword_1889690369)
    val t_CheckLogin2CheckPassword_734383365 = new Transition(CheckLogin_state, CheckPassword_state, TransitionCheckLogin2CheckPassword_734383365(), root)
    t_CheckLogin2CheckPassword_734383365.initEvent(Access.getName)
    parent.addTransition(t_CheckLogin2CheckPassword_734383365)
    val t_CheckLogin2Ready_950047510 = new Transition(CheckLogin_state, Ready_state, TransitionCheckLogin2Ready_950047510(), root)
    t_CheckLogin2Ready_950047510.initEvent(Access.getName)
    parent.addTransition(t_CheckLogin2Ready_950047510)
    val t_CheckPassword2LoggedOn_387873523 = new Transition(CheckPassword_state, LoggedOn_state, TransitionCheckPassword2LoggedOn_387873523(), root)
    t_CheckPassword2LoggedOn_387873523.initEvent(Access.getName)
    parent.addTransition(t_CheckPassword2LoggedOn_387873523)
    val t_CheckPassword2CheckLogin_661063884 = new Transition(CheckPassword_state, CheckLogin_state, TransitionCheckPassword2CheckLogin_661063884(), root)
    t_CheckPassword2CheckLogin_661063884.initEvent(Access.getName)
    parent.addTransition(t_CheckPassword2CheckLogin_661063884)
    case class TransitionReady2CheckPassword_1889690369 extends TransitionAction {
      override def executeActions() = {
        println(this + ".executeActions")
        Mediator_password_var = getEvent(Log.getName).get.asInstanceOf[Log].password
        handler.root.getPort("Server") match{
          case Some(p) => p.send(new Login(getEvent(Log.getName).get.asInstanceOf[Log].login))
          case None => println("Warning: no port Server You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionCheckLogin2CheckPassword_734383365 extends TransitionAction {
      override def checkGuard() : Boolean = {
        getEvent(Access.getName).get.asInstanceOf[Access].result == true
      }
      override def executeActions() = {
        println(this + ".executeActions")
        handler.root.getPort("Server") match{
          case Some(p) => p.send(new Password(Mediator_password_var))
          case None => println("Warning: no port Server You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionCheckLogin2Ready_950047510 extends TransitionAction {
      override def checkGuard() : Boolean = {
        getEvent(Access.getName).get.asInstanceOf[Access].result == false
      }
      override def executeActions() = {
        println(this + ".executeActions")
        handler.root.getPort("Client") match{
          case Some(p) => p.send(new Ack(false))
          case None => println("Warning: no port Client You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionCheckPassword2LoggedOn_387873523 extends TransitionAction {
      override def checkGuard() : Boolean = {
        getEvent(Access.getName).get.asInstanceOf[Access].result == true
      }
      override def executeActions() = {
        println(this + ".executeActions")
        handler.root.getPort("Client") match{
          case Some(p) => p.send(new Ack(true))
          case None => println("Warning: no port Client You may consider revising your ThingML model.")
        }
      }

    }
    case class TransitionCheckPassword2CheckLogin_661063884 extends TransitionAction {
      override def checkGuard() : Boolean = {
        getEvent(Access.getName).get.asInstanceOf[Access].result == false
      }
      override def executeActions() = {
        println(this + ".executeActions")
        handler.root.getPort("Client") match{
          case Some(p) => p.send(new Ack(false))
          case None => println("Warning: no port Client You may consider revising your ThingML model.")
        }
      }

    }
  }
}