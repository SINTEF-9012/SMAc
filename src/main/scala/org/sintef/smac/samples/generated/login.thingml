datatype String;

component Service1
{
	message login(login : String, password : String);
	message ack();
	
	receives login
	sends ack
	
	statechart Service1Logic init WaitCredentials {
		
		state WaitCredentials {
			transition next -> ValidateCredentials {
				event login
			}
		}
		
		state ValidateCredentials {
			on entry {
				'println("Validating credentials...")'
			}
			
			transition next -> WaitCredentials {
				action{
					send ack()
				}
			}
		}
	}
}

component Client {

	//Messages to interact with Service1 (mirror messages)
	sends login
	receives ack
	
	property myLogin : String
	property myPassword : String

	statechart ClientLogic init INIT {
		state INIT {
			on entry { 
				'println("Init...")'
				'myLogin = "Brice"'
				'myPassword = "REMICS"'
			}
			
			on exit {
				'println("Done!")'
			}
			
			transition next -> WaitForAck {
				action send login(myLogin, myPassword)
			}
		}
	
		state WaitForAck {
			on entry { 
				'println("Waiting Ack...")'			
			}
				
			transition next -> LoggedIn {
				event ack
			}
			
			transition timeout -> Timeout @delay "10000"{
				
			}
		}
		
		state Timeout {
			on entry {
				'println("TIMEOUT!")'
				'exit'
			}
		}
		
		state LoggedIn {
			on entry {
				'println("Logged In")'
			}
		}
		
	}
}

component Service2
{
	message setLogin(login : String);
	message setPassword(password : String);
	message ackLogin();
	message ackPassword();
	
	receives setLogin, setPassword
	sends ackLogin, ackPassword
	
	statechart Service2Logic init WaitLogin {
		
		state WaitLogin {
			transition next -> ValidateLogin {
				event setLogin
			}
		}
		
		state ValidateLogin {
			on entry {
				'println("Validating login...")'
			}
			
			transition next -> WaitPassword {
				action{
					send ackLogin()
				}
			}
		}
		
		state WaitPassword {
			transition next -> ValidateLogin {
				event setPassword
			}
			
			transition next -> WaitLogin @delay "10000"{

			}
		}
		
		state ValidatePassword {
			on entry {
				'println("Validating password...")'
			}
			
			transition next -> WaitLogin {
				action{
					send ackPassword()
				}
			}
		}
		
	}	
}


component Mediator {

	//Same messages as Service1, so that client can transparently communicate with the Mediator
	receives login
	sends ack
	
	//Messages to interact with Service2
	sends setLogin, setPassword
	receives ackLogin, ackPassword
	
	property myLogin : String
	property myPassword : String

	statechart MediatorLogic init WaitForCredentials {	
		state WaitForCredentials {
			on entry { 
				'println("Waiting Credentials from Client...")'			
			}
				
			transition next -> WaitForAck {
				event login
				action {
					'println("Extracting crendentials... Send credentials to Service2")'
					send setLogin()
					send setPassword()
				}
			}
		}
		
		state WaitForAck {
			on entry {
				'println("Waiting for Ack from Service2...")'
			}
			
			transition timeout -> Timeout @delay "10000"{
			
			}
			
			transition next -> LoggedIn {
				event ackLogin
				event ackPassword	
				action {
					'println("Sending ack back to client")'
					send ack()
				}			
			}
		}
		
		state Timeout {
			on entry {
				'println("TIMEOUT!")'
				'exit'
			}
		}
		
		state LoggedIn {
			on entry {
				'println("Mediation of the business logic")'
			}
			
			transition next -> WaitForCredentials {
			
			}
		}
		
	}
}